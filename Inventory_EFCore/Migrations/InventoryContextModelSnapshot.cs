// <auto-generated />
using System;
using EFCore_DBFirstApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCore_DBFirstApp.Migrations
{
    [DbContext(typeof(InventoryContext))]
    partial class InventoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category_name");

                    b.HasKey("CategoryId")
                        .HasName("PK__Categori__D54EE9B464821D65");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = -1,
                            CategoryName = "Default 01"
                        },
                        new
                        {
                            CategoryId = -2,
                            CategoryName = "Default 02"
                        },
                        new
                        {
                            CategoryId = -3,
                            CategoryName = "Default 03"
                        },
                        new
                        {
                            CategoryId = -4,
                            CategoryName = "Default 04"
                        });
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contact_info");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__CD65CB856DECD931");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.InventoryLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("log_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Action")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("action");

                    b.Property<DateOnly?>("ActionDate")
                        .HasColumnType("date")
                        .HasColumnName("action_date");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnName("reference_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    b.HasKey("LogId")
                        .HasName("PK__Inventor__9E2397E051827CF4");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventory_Log", (string)null);
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("PermissionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("permission_name");

                    b.HasKey("PermissionId")
                        .HasName("PK__Permissi__E5331AFA8A1094A3");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("QuantityInStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("quantity_in_stock");

                    b.HasKey("ProductId")
                        .HasName("PK__Products__47027DF5BB6561BB");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.ProductReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateOnly?>("ReviewDate")
                        .HasColumnType("date")
                        .HasColumnName("review_date");

                    b.HasKey("ReviewId")
                        .HasName("PK__ProductR__60883D903F65B7C2");

                    b.HasIndex("CustomerId");

                    b.HasIndex(new[] { "ProductId", "CustomerId" }, "UQ_Review")
                        .IsUnique()
                        .HasFilter("[product_id] IS NOT NULL AND [customer_id] IS NOT NULL");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.ProductWarehouseStock", b =>
                {
                    b.Property<int>("PwsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pws_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PwsId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int")
                        .HasColumnName("quantity_in_stock");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    b.HasKey("PwsId")
                        .HasName("PK__ProductW__BEB1289193413F76");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductWarehouseStock", (string)null);
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("purchase_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<DateOnly?>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("purchase_date");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_cost");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PurchaseId")
                        .HasName("PK__Purchase__87071CB94F6A0C10");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__760965CC78415C10");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.RolePermission", b =>
                {
                    b.Property<int?>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sale_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly?>("SaleDate")
                        .HasColumnType("date")
                        .HasColumnName("sale_date");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_price");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("SaleId")
                        .HasName("PK__Sales__E1EB00B23BE221DB");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.SalesDetail", b =>
                {
                    b.Property<int>("SaleDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sale_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleDetailId"));

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int")
                        .HasColumnName("sale_id");

                    b.HasKey("SaleDetailId")
                        .HasName("PK__SalesDet__4D671D83D04D4668");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SalesDetails");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contact_info");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("SupplierId")
                        .HasName("PK__Supplier__6EE594E8EC223242");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.SupplierPayment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount_paid");

                    b.Property<DateOnly?>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_method");

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("PaymentId")
                        .HasName("PK__Supplier__ED1FC9EAAFF80C26");

                    b.HasIndex("PurchaseId");

                    b.ToTable("SupplierPayments");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contact_info");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__Users__B9BE370F7999452E");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.VwProductStock", b =>
                {
                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category_name");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("product_name");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int")
                        .HasColumnName("quantity_in_stock");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("warehouse_name");

                    b.ToTable((string)null);

                    b.ToView("vw_ProductStock", (string)null);
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.VwPurchaseDetail", b =>
                {
                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("product_name");

                    b.Property<DateOnly?>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("purchase_date");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_id");

                    b.Property<string>("PurchasedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("purchased_by");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("supplier_name");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_cost");

                    b.ToTable((string)null);

                    b.ToView("vw_PurchaseDetails", (string)null);
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.VwSalesDetail", b =>
                {
                    b.Property<string>("CustomerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("customer_name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("product_name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateOnly?>("SaleDate")
                        .HasColumnType("date")
                        .HasColumnName("sale_date");

                    b.Property<int>("SaleId")
                        .HasColumnType("int")
                        .HasColumnName("sale_id");

                    b.Property<string>("SoldBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sold_by");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(21, 2)")
                        .HasColumnName("total_price");

                    b.ToTable((string)null);

                    b.ToView("vw_SalesDetails", (string)null);
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("WarehouseId")
                        .HasName("PK__Warehous__734FE6BF1239B1CA");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.InventoryLog", b =>
                {
                    b.HasOne("EFCore_DBFirstApp.Models.Product", "Product")
                        .WithMany("InventoryLogs")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Inventory__produ__6C190EBB");

                    b.HasOne("EFCore_DBFirstApp.Models.User", "User")
                        .WithMany("InventoryLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Inventory__user___6E01572D");

                    b.HasOne("EFCore_DBFirstApp.Models.Warehouse", "Warehouse")
                        .WithMany("InventoryLogs")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("FK__Inventory__wareh__6D0D32F4");

                    b.Navigation("Product");

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Product", b =>
                {
                    b.HasOne("EFCore_DBFirstApp.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Products__catego__4E88ABD4");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.ProductReview", b =>
                {
                    b.HasOne("EFCore_DBFirstApp.Models.Customer", "Customer")
                        .WithMany("ProductReviews")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__ProductRe__custo__75A278F5");

                    b.HasOne("EFCore_DBFirstApp.Models.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__ProductRe__produ__76969D2E");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.ProductWarehouseStock", b =>
                {
                    b.HasOne("EFCore_DBFirstApp.Models.Product", "Product")
                        .WithMany("ProductWarehouseStocks")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductWa__produ__5441852A");

                    b.HasOne("EFCore_DBFirstApp.Models.Warehouse", "Warehouse")
                        .WithMany("ProductWarehouseStocks")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductWa__wareh__5535A963");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Purchase", b =>
                {
                    b.HasOne("EFCore_DBFirstApp.Models.Product", "Product")
                        .WithMany("Purchases")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Purchases__produ__66603565");

                    b.HasOne("EFCore_DBFirstApp.Models.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__Purchases__suppl__6754599E");

                    b.HasOne("EFCore_DBFirstApp.Models.User", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Purchases__user___68487DD7");

                    b.Navigation("Product");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.RolePermission", b =>
                {
                    b.HasOne("EFCore_DBFirstApp.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK__RolePermi__permi__7B5B524B");

                    b.HasOne("EFCore_DBFirstApp.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__RolePermi__role___7A672E12");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Sale", b =>
                {
                    b.HasOne("EFCore_DBFirstApp.Models.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Sales__customer___5EBF139D");

                    b.HasOne("EFCore_DBFirstApp.Models.User", "User")
                        .WithMany("Sales")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Sales__user_id__5FB337D6");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.SalesDetail", b =>
                {
                    b.HasOne("EFCore_DBFirstApp.Models.Product", "Product")
                        .WithMany("SalesDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__SalesDeta__produ__6383C8BA");

                    b.HasOne("EFCore_DBFirstApp.Models.Sale", "Sale")
                        .WithMany("SalesDetails")
                        .HasForeignKey("SaleId")
                        .HasConstraintName("FK__SalesDeta__sale___628FA481");

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.SupplierPayment", b =>
                {
                    b.HasOne("EFCore_DBFirstApp.Models.Purchase", "Purchase")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK__SupplierP__purch__70DDC3D8");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.User", b =>
                {
                    b.HasOne("EFCore_DBFirstApp.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Users__role_id__59FA5E80");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Customer", b =>
                {
                    b.Navigation("ProductReviews");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Product", b =>
                {
                    b.Navigation("InventoryLogs");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductWarehouseStocks");

                    b.Navigation("Purchases");

                    b.Navigation("SalesDetails");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Purchase", b =>
                {
                    b.Navigation("SupplierPayments");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Sale", b =>
                {
                    b.Navigation("SalesDetails");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Supplier", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.User", b =>
                {
                    b.Navigation("InventoryLogs");

                    b.Navigation("Purchases");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("EFCore_DBFirstApp.Models.Warehouse", b =>
                {
                    b.Navigation("InventoryLogs");

                    b.Navigation("ProductWarehouseStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
